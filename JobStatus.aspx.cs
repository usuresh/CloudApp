using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using System.Data;
using System.Text.RegularExpressions;
namespace NexusJobs
{
    public partial class JobStatus : System.Web.UI.Page
    {
        string StrQuery = null;
        string strJobStatus = null;
        string[] strArrUser = null;
        string cstext1 = null;
        BLmodel BL = new BLmodel();

        protected void Page_Load(object sender, EventArgs e)
        {
            //if (!IsPostBack)      

            string strUser = (string)Session["ssUser"];

            if (!string.IsNullOrEmpty(strUser))
            {
                strArrUser = strUser.Split('&');
            }
            else
            {
                Response.Redirect("Login.aspx");
            }

            if (1 == Convert.ToInt32(Session["ssScreenType"].ToString()))
            {
                lbClientName.Text = Session["ssClientName"].ToString();
                lbClientType.Text = Session["ssClientType"].ToString();
                lbJobStatus.Text = Session["ssJobStatus"].ToString();

                StrQuery = "select TOP 15 job_Name as 'Method Name' ,Lastrundate ,Comments  from JMC_LOGDETAILS jld left join JMC_METHODS jm on jm.pkey = jld.fKey_Methods inner join jmc_clients jc on jc.pkey = jld.fkey_client where jc.ClientName = '" + Session["ssClientName"].ToString() + "' and Method_status = '" + Session["ssJobStatus"].ToString() + "' Order by jld.Pkey desc";

                LoadStatusDetails(BL.returnDataTable(StrQuery));
            }
            if (2 == Convert.ToInt32(Session["ssScreenType"].ToString()))
            {
                lbClientName.Text = Session["ErrorclientName"].ToString();
                lbClientType.Text = Session["ErrorClientType"].ToString();
                lbJobStatus.Text = Session["ErrorJobStatus"].ToString();
                StrQuery = "select TOP 15 job_Name as 'Method Name' ,Lastrundate ,Comments  from JMC_LOGDETAILS jld left join JMC_METHODS jm on jm.pkey = jld.fKey_Methods inner join jmc_clients jc on jc.pkey = jld.fkey_client where jc.ClientName = '" + Session["ErrorclientName"].ToString() + "' and Method_status = '" + Session["ErrorJobStatus"].ToString() + "' Order by jld.Pkey desc";
                LoadStatusDetails(BL.returnDataTable(StrQuery));
            }
        }

        private void LoadStatusDetails(DataTable dtTable)
        {
            rptTable.DataSource = dtTable;
            rptTable.DataBind();
        }

        protected void lnkPrevious_Click1(object sender, EventArgs e)
        {
            Response.Redirect("JobDetails.aspx");
        }
       
        protected void imgbtHome_Click1(object sender, ImageClickEventArgs e)
        {
            Response.Redirect("Dashboard.aspx");
        }

        public void ExportToExcel(DataTable dt)
        {

            if (dt.Rows.Count > 0)
            {
                string filename = "JobStatus.xls";

                string excelHeader = "Report generated by :" + strArrUser[0].ToString() + " ";

                System.IO.StringWriter tw = new System.IO.StringWriter();

                System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(tw);

                DataGrid dgGrid = new DataGrid();

                dgGrid.DataSource = dt;

                dgGrid.DataBind();

                dgGrid.HeaderStyle.BackColor = System.Drawing.Color.LightBlue;
                dgGrid.HeaderStyle.Font.Bold = true;
                dgGrid.GridLines = GridLines.Both;

                // Report Header
                /*arivu*/
                hw.WriteLine("<table>");
                hw.WriteLine("<tr><td><b><u><font size=’3′> " + excelHeader + " </font></u></b></td><td>&nbsp</td><td>&nbsp</td></tr>");
                hw.WriteLine("<tr><td><b><u><font size=’3′> " + "CLIENT TYPE:" + lbClientType.Text.ToUpper() + " </font></u></b></td><td><b><u><font size=’3′> " + "CLIENT NAME:" + lbClientName.Text.ToUpper() + " </font></u></b></td><td><b><u><font size=’3′> " + "JOB STATUS:" + lbJobStatus.Text.ToUpper() + " </font></u></b></td></tr>");
                hw.WriteLine("<tr><td><b><u><font size=’3′> " + "JOB STATUS:" + lbJobStatus.Text.ToUpper() + " </font></u></b></td><td><b><u><font size=’3′> " + " " + "</font></u></b></td><td><b><u><font size=’3′> " + "" + " </font></u></b></td></tr>");
                hw.WriteLine("</table>");
                /**/
                //Get the HTML for the control.

                dgGrid.RenderControl(hw);

                //Write the HTML back to the browser.
                Response.ContentType = "application/vnd.ms-excel";
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + filename + "");
                Response.Write(tw.ToString());

                Response.End();
            }
        }

        protected void lnkExportExcel_Click(object sender, EventArgs e)
        {
            if (rptTable.Items.Count <= 0)
            {
                RegisterStartupScript("MSG", "<script>alert ('No Records to Export!')</script>;"); //arivu
                return;
            }

                ExportToExcel(BL.returnDataTable(StrQuery));

        }

        #region ShowContent //arivu
        protected string ShowContent(object o)
        {
            int iStringSize = 100;
            string content = string.Empty;
            if (o.ToString().Length > iStringSize)
            {
                content = Regex.Replace(o.ToString(), "<(.|\n)*?>", string.Empty).Replace("&nbsp;", string.Empty);
                if (content.Length >= iStringSize)
                {
                    content = content.Substring(0, iStringSize);
                    //content = content.Substring(0, content.LastIndexOf(" ")); //removes last word
                }
            }
            else
            {
                content = o.ToString();
            }
            return content;
        }
        #endregion
        #region MakeLink //arivu
        protected string MakeLink(object o, int iRowId)
        {
            string content = o.ToString();
            string url = string.Empty;
            if (content.Length > 100)
            {
                if (!string.IsNullOrEmpty(content))
                {
                    url = "<a  id=\"various" + iRowId + "\" href=\"#inline" + iRowId + "\"  >Readmore</a>";
                }
                else
                {
                    url = string.Empty;
                }
            }

            return url;
        }
        #endregion
        #region CreateHiddenField //arivu
        protected string CreateHiddenField(object o, int RowID)
        {
            string content = string.Empty;
            string value = string.Empty;

            if (!string.IsNullOrEmpty(o.ToString()))
            {
                content = Regex.Replace(o.ToString(), "'", string.Empty).Replace("&nbsp;", string.Empty);
            }

            if (o.ToString().Length > 100)
            {
                value = "<div style=\"display: none;\">";
                value += "<div id=\"inline" + RowID + "\" style=\"margin: 10px;width:600px;height:200px;overflow:auto;font-family: Verdana, Geneva, sans-serif; font-size: 12px;\">";
                value += content;
                value += "</div>";
            }
            return value;
        }
        #endregion
        #region Makescript //arivu
        protected string MakeScript(int RowId)
        {
            string Script = string.Empty;

            Script = "<script type=\"text/javascript\">";
            Script += "$(document).ready(function() {";
            Script += "$(\"#various" + RowId + "\").fancybox({";
            Script += "	'titlePosition'		: 'inside',";
            Script += "	'transitionIn'		: 'none',";
            Script += "	'transitionOut'		: 'none'";
            Script += "});";
            Script += "});";
            Script += "</script>";
            return Script;
        }
        #endregion
    }
}